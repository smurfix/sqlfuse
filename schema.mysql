-- MySQL dump 10.10
--
-- Host: localhost    Database: mysqlfs
-- ------------------------------------------------------
-- Server version	5.0.22-Debian_0ubuntu6.06.2

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

-- 
-- Some metadata
DROP TABLE IF EXISTS `info`;
CREATE TABLE `info` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `name` varchar(255) NOT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) DEFAULT CHARSET=utf8;
insert into info(name,value) values('version','0.5.3');

--
-- An inode is the primary identifier for a file or directory.
-- Note that there is no refcount.
-- CONSTRAINT: only delete the inode when copies==0
DROP TABLE IF EXISTS `inode`;
CREATE TABLE `inode` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `root` int(10) unsigned NOT NULL default '0',
  `mode` int(11) NOT NULL default '0',
  `typ` char character set ascii NOT NULL default 'f', -- file directory block char pipe socket
  `uid` int(10) unsigned NOT NULL default '0',
  `gid` int(10) unsigned NOT NULL default '0',
  `atime` bigint(15) NOT NULL default '0',
  `mtime` bigint(15) NOT NULL default '0',
  `ctime` bigint(15) NOT NULL default '0',
  `atime_ns` int(10) unsigned NOT NULL default '0',
  `mtime_ns` int(10) unsigned NOT NULL default '0',
  `ctime_ns` int(10) unsigned NOT NULL default '0',
  `size` bigint(20) unsigned NOT NULL default '0', -- mirrors file size
  `rdev` int(10) NOT NULL default '0',
  `event` bigint(20) unsigned NULL, -- ID of file's latest event record
  `seq` bigint(20) unsigned not null default '1', -- update sequence number
  `target` varbinary(1023) null, -- link/file destination
  PRIMARY KEY (`id`),
  UNIQUE KEY `event` (`event`),
  KEY `fk_inode_root` (`root`)
) DEFAULT CHARSET=binary;
insert into `inode` (`id`,`mode`,`root`,`typ`) values (1,0,1,'d'); -- mode is S_IFDIR, set when first mounting
insert into info(name,value) values('targetlen','1023');

--
-- Inodes can have extended attributes.
-- This table collects attribute names (they can be quite long and redundant).
DROP TABLE IF EXISTS `xattr_name`;
CREATE TABLE `xattr_name` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) DEFAULT CHARSET=utf8;
insert into info(name,value) values('attrnamelen','255');

-- 
-- The actaul extended attributes are here.
-- Note that the value needs to be binary.
DROP TABLE IF EXISTS `xattr`;
CREATE TABLE `xattr` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `inode` bigint(20) unsigned NOT NULL,
  `name` int(10) unsigned NOT NULL,
  `seq` int(10) unsigned NOT NULL,
  `value` varbinary(1024) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `inode` (`inode`,`name`),
  KEY `name` (`name`),
  constraint `fk_xattr_name` foreign key(`name`) references `xattr_name`(`id`) on delete restrict,
  constraint `fk_xattr_inode` foreign key(`inode`) references `inode`(`id`) on delete cascade
) DEFAULT CHARSET=utf8;
insert into info(name,value) values('attrlen','1024');

--
-- This represents basic directory entries.
-- Root directories do not have one of their own.
DROP TABLE IF EXISTS `tree`;
CREATE TABLE `tree` (
  `inode` bigint(20) unsigned NOT NULL,
  `parent` bigint(20) unsigned not NULL,
  `name` varchar(255) NOT NULL,
  KEY `inode` (`inode`),
  UNIQUE KEY `name` (`parent`,`name`),
  constraint `fk_tree_inode` foreign key(`inode`) references `inode`(`id`) on delete cascade,
  constraint `fk_tree_parent` foreign key(`parent`) references `inode`(`id`) on delete restrict
) DEFAULT CHARSET=utf8;
insert into info(name,value) values('namelen','255');

-- 
-- You can have multiple root nodes in the system.
-- This names them.
-- CONSTRAINT: (COUNT(*) from tree where tree.inode=root.inode) == 0
--             the converse, i.e. every inode that's not a root has a tree entry,
--             does not hold (because of deletions)
CREATE TABLE `root` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `inode` bigint(20) unsigned NOT NULL,
  `name` varchar(255) NOT NULL,
-- statistics
  `nfiles` bigint(20) unsigned not null default '1',
  `ndirs` bigint(20) unsigned not null default '1',
  `nblocks` bigint(20) unsigned not null default '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `inode` (`inode`),
  CONSTRAINT `fk_root_inode` FOREIGN KEY (`inode`) REFERENCES `inode` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into `root`(`id`,`inode`,`name`) values(1,1,'master');
insert into info(name,value) values('rootnamelen','255');
alter table `inode` add constraint `fk_inode_root` foreign key(`root`) references `root`(`id`) on delete restrict;

-- 
-- Multiple instances can have disparate directory views.
-- Separate nodes on the same root share identical content, eventually;
-- data will have to be copied
DROP TABLE IF EXISTS `node`;
CREATE TABLE `node` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `root` int(10) unsigned NOT NULL, -- my root
  `name` varchar(255) NOT NULL,
  `files` varchar(1024) NOT NULL, -- local file system path
  `address` varchar(64) NULL, -- IP address to listen on
  `port` smallint(5) unsigned NULL default 50329, -- port to listen on
  `secret` varbinary(64) NOT NULL, -- secret key for authorisation of peer nodes
  `event` bigint(20) unsigned NOT NULL, -- last that's been processed here
  `password` varchar(64) NULL default NULL, -- secret key for authorisation of manhole monitor
  `autocopy` bool not null default true, -- if false, this is a cache-only node
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `fk_node_event` (`event`),
  KEY `fk_node_root` (`root`),
  constraint `fk_node_root` foreign key(`root`) references `root`(`id`) on delete cascade
) DEFAULT CHARSET=utf8;
insert into `node`(`id`,`root`,`name`,`files`,`event`) values(1,1,'default','/tmp/sqlmount',1);
insert into info(name,value) values('nodenamelen','255');
insert into info(name,value) values('nodepathlen','1024');
insert into info(name,value) values('secretlen','64');

-- 
-- Files can be cached locally, in which case not the whole file may be
-- present.
DROP TABLE IF EXISTS `cache`;
CREATE TABLE `cache` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `inode` bigint(20) unsigned NOT NULL,
  `node` int(10) unsigned NOT NULL,
  `event` bigint(20) unsigned NULL,
  `cached` varchar(1023) null, -- known-data range: NULL=whole file
  PRIMARY KEY (`id`),
  unique key `inodeloc` (node,inode),
  key `fk_cache_inode` (inode),
  key `fk_cache_event` (event),
  constraint `fk_cache_inode` foreign key(`inode`) references `inode`(`id`) on delete cascade,
  constraint `fk_cache_node` foreign key(`node`) references `node`(`id`) on delete cascade
) DEFAULT CHARSET=utf8;

-- 
-- Remember file updates (and deletes). We need this to copy files.
-- 
DROP TABLE IF EXISTS `event`;
CREATE TABLE `event` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `inode` bigint(20) unsigned NOT NULL,
  `node` int(10) unsigned NOT NULL,
  `typ` char character set ascii NOT NULL, -- 'n'ew 'c'hange 'f'inish_write 'd'elete 'i'nit_node 's'ync 't'rim
  `range` varbinary(1023) NULL, -- for change records: what was witten?
  PRIMARY KEY (`id`),
  KEY `fk_event_node` (`node`),
  KEY `fk_event_inode` (`inode`,`typ`,`id`),
  constraint `fk_event_inode` foreign key(`inode`) references `inode`(`id`) on delete restrict,
  constraint `fk_event_node` foreign key(`node`) references `node`(`id`) on delete cascade
) DEFAULT CHARSET=binary;
insert into info(name,value) values('rangelen','1023');
insert into `event` (`id`,`inode`,`node`,`typ`) values (1,1,1,'i');

alter table `inode` add constraint `fk_inode_event` foreign key(`event`) references `event`(`id`) on delete set null;
alter table `cache` add constraint `fk_cache_event` foreign key(`event`) references `event`(`id`) on delete set null;


-- 
-- How to do updates
-- 
DROP TABLE IF EXISTS `updater`;
CREATE TABLE `updater` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `src` int(10) unsigned NOT NULL, -- the node I'm copying from
  `dest` int(10) unsigned NOT NULL, -- my ID
  `distance` tinyint(2) unsigned NOT NULL, -- how expensive is copying?
  `method` varchar(10) not null, -- some Python class or other
  `args` varchar(1024) not null, -- some class-specific parameters
  PRIMARY KEY (`id`),
  KEY `fk_updater_dest` (`dest`),
  KEY `fk_updater_src` (`src`),
  constraint `fk_updater_src` foreign key(`src`) references `node`(`id`) on delete cascade,
  constraint `fk_updater_dest` foreign key(`dest`) references `node`(`id`) on delete cascade
) DEFAULT CHARSET=utf8;

-- 
-- file copies that are still open
-- 
DROP TABLE IF EXISTS `todo`;
CREATE TABLE `todo` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `node` int(10) unsigned NOT NULL, -- my ID
  `missing` int(10) unsigned NULL default NULL, -- wait for reachability
  `inode` bigint(20) unsigned NOT NULL, -- the data I'm copying
  `typ` char character set ascii, -- 'f'ilesync, 'd'elete, 't'rim
  PRIMARY KEY (`id`),
  KEY `fk_todo_inode` (`inode`),
  UNIQUE KEY `fk_todo_nodei` (`node`,`inode`),
  KEY `fk_todo_missing` (`missing`),
  constraint `fk_todo_missing` foreign key(`missing`) references `node`(`id`) on delete cascade,
  constraint `fk_todo_inode` foreign key(`inode`) references `inode`(`id`) on delete cascade,
  constraint `fk_todo_node` foreign key(`node`) references `node`(`id`) on delete cascade
) DEFAULT CHARSET=utf8;
 

-- 
-- file copies which failed for some reason
-- TODO: retry
DROP TABLE IF EXISTS `fail`;
CREATE TABLE `fail` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `node` int(10) unsigned NOT NULL, -- my ID
  `inode` bigint(20) unsigned NOT NULL, -- the data I'm copying
  `typ` char character set ascii, -- 'f'ilesync, 'd'elete
  `reason` text,
  PRIMARY KEY (`id`),
  KEY `fk_fail_inode` (`inode`),
  UNIQUE KEY `fk_todo_nodei` (`node`,`inode`),
  constraint `fk_fail_inode` foreign key(`inode`) references `inode`(`id`) on delete cascade,
  constraint `fk_fail_node` foreign key(`node`) references `node`(`id`) on delete cascade
) DEFAULT CHARSET=utf8;
 

/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

